name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 1：登录到 GHCR（使用 GitHub 内置令牌）
      - name: 登录到 GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 使用 GitHub 自动生成的令牌（无需手动创建）
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2：提取镜像元数据（自动生成标签）
      - name: 提取镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 镜像名称格式：ghcr.io/组织或用户名/仓库名
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch  # 分支名作为标签（如 main）
            type=ref,event=tag     # git tag 作为标签（如 v1.0.0）
            type=sha,format=short   # 提交 SHA 作为标签（如 abc123）
            type=raw,value=latest   # 固定标签 latest

      # 步骤 3：构建并推送镜像到 GHCR
      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: . # 构建上下文（当前目录）
          push: ${{ github.event_name != 'pull_request' }} # 仅在 push 事件时推送
          tags: ${{ steps.meta.outputs.tags }} # 使用元数据生成的标签
          labels: ${{ steps.meta.outputs.labels }}
